<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/integration"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:int-xml="http://www.springframework.org/schema/integration/xml"
             xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
             xmlns:file="http://www.springframework.org/schema/integration/file"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="
             http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd
             http://www.springframework.org/schema/context
             http://www.springframework.org/schema/context/spring-context.xsd
             http://www.springframework.org/schema/integration
             http://www.springframework.org/schema/integration/spring-integration.xsd
             http://www.springframework.org/schema/integration/xml
             http://www.springframework.org/schema/integration/xml/spring-integration-xml.xsd
             http://www.springframework.org/schema/integration/amqp
             http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
             http://www.springframework.org/schema/integration/file
             http://www.springframework.org/schema/integration/file/spring-integration-file.xsd">

  <!-- Зависимости конфигурации (используемые бины) -->
  <beans:bean class="mis.integration.ariadna.config.IntegrationConfig"/>
  <beans:bean class="mis.integration.ariadna.config.RabbitConfig"/>
  <beans:import resource="logger-integration.xml"/>
  <context:property-placeholder location="classpath:application.properties"/>

  <!-- Вычитываем и удаляем md5-файлы из каталога входящих отчетов и удаляем их -->
  <file:inbound-channel-adapter id="md5ReportInput" directory="file:${input.report.directory}"
                                filter="md5FileFilter">
    <poller fixed-delay="5000"/>
  </file:inbound-channel-adapter>

  <file:file-to-string-transformer input-channel="md5ReportInput" output-channel="nullChannel"
                                   delete-files="true"/>

  <!-- Вычитываем xml-файлы из каталога входящих отчетов и обрабатываем их -->
  <file:inbound-channel-adapter id="lisReportInput" directory="file:${input.report.directory}"
                                filter="xmlFileFilter">
    <poller fixed-delay="5000"/>
  </file:inbound-channel-adapter>

  <!-- Преобразование файла "Протокол ЛИ", поступившего из ЛИС -->

  <file:file-to-string-transformer input-channel="lisReportInput" output-channel="lisReportStringChannel"
                                   charset="UTF-8"
                                   delete-files="true"/>

  <channel id="lisReportStringChannel" datatype="java.lang.String"/>

  <chain input-channel="lisReportStringChannel" output-channel="misReportStringChannel">
    <int-xml:unmarshalling-transformer unmarshaller="ariadnaJaxb2Marshaller"/>
    <splitter expression="payload.getObservations()"/>
    <!--Запоминаем исходный объект observation (будет использоваться при построении pdf) -->
    <header-enricher>
      <header name="observation" expression="payload"/>
    </header-enricher>
    <splitter expression="payload.getReportGroups()"/>
    <!--Запоминаем исходный объект reportGroup (будет использоваться при построении pdf) -->
    <header-enricher>
      <header name="reportGroup" expression="payload"/>
    </header-enricher>
    <transformer expression="@reportTransformer.transformToReport(headers.get('observation'), payload)"/>
    <header-enricher>
      <!--Запоминаем полученный объект report (будет использоваться при построении pdf) -->
      <header name="report" expression="payload"/>
      <!-- Задаем имя "шпионского" zip-файла с протоколом, передаваемым в МИС -->
      <header name="zip_name" expression="headers.get('file_name') + '-' + @serviceCodeFinder.getCode(payload) + '.zip'"/>
    </header-enricher>
    <int-xml:marshalling-transformer marshaller="misReportMarshaller" result-type="StringResult"/>
    <transformer expression="payload.toString()"/>
  </chain>

  <channel id="misReportStringChannel" datatype="java.lang.String">
    <!--<interceptors>-->
      <!--<wire-tap channel="loggerChannel"/>-->
    <!--</interceptors>-->
  </channel>

  <chain input-channel="misReportStringChannel" output-channel="misReportZipChannel">
    <transformer ref="pdfSplitter"/>
    <transformer ref="zipTransformer"/>
  </chain>

  <publish-subscribe-channel id="misReportZipChannel"/>

  <!-- Тестовая конфигурация (сохранение в файл)
  <file:outbound-channel-adapter channel="misReportZipChannel"
                                 directory="${spy.report.into.mis}"/>
  -->

  <bridge input-channel="misReportZipChannel" output-channel="misReportBase64Channel"/>

  <channel id="misReportBase64Channel"/>

  <transformer input-channel="misReportBase64Channel" output-channel="misReportOutput"
               ref="base64Encoder"/>

  <!-- Записываем результат в очередь (входящуя) протоколов МИСа -->
  <int-amqp:outbound-channel-adapter id="misReportOutput"
                                     amqp-template="rabbitTemplate"
                                     exchange-name="${output.report.exchange:prescription.complete.exchange}"/>
</beans:beans>