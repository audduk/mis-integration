<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/integration"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:int-xml="http://www.springframework.org/schema/integration/xml"
             xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
             xmlns:file="http://www.springframework.org/schema/integration/file"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="
             http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd
             http://www.springframework.org/schema/context
             http://www.springframework.org/schema/context/spring-context.xsd
             http://www.springframework.org/schema/integration
             http://www.springframework.org/schema/integration/spring-integration.xsd
             http://www.springframework.org/schema/integration/xml
             http://www.springframework.org/schema/integration/xml/spring-integration-xml.xsd
             http://www.springframework.org/schema/integration/amqp
             http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
             http://www.springframework.org/schema/integration/file
             http://www.springframework.org/schema/integration/file/spring-integration-file.xsd">

  <!-- Зависимости конфигурации (используемые бины) -->
  <beans:bean class="mis.integration.ariadna.config.IntegrationConfig"/>
  <beans:bean class="mis.integration.ariadna.config.RabbitConfig"/>
  <beans:import resource="logger-integration.xml"/>
  <context:property-placeholder location="classpath:application.properties"/>

  <!-- Решение для отладки (загрузка назначения в формате МИС из файла в каталоге ${input.request.directory}) -->
  <!--<file:inbound-channel-adapter id="lisRequestFileInput" directory="file:${input.request.directory}">
    <poller fixed-delay="50"/>
  </file:inbound-channel-adapter>
  <file:file-to-string-transformer input-channel="lisRequestFileInput" output-channel="misPrescriptionStringChannel" delete-files="true"/>-->
  <!-- завершение решения для отладки -->

  <!-- Считываем "Заявку на ЛИ" из очереди (исходящей) МИСа -->
  <int-amqp:inbound-channel-adapter channel="misPrescriptionStringChannel"
                                    connection-factory="connectionFactory"
                                    acknowledge-mode="NONE"
                                    queue-names="${input.request.queue:prescription.create.queue}"/>

  <!-- Преобразование "Заявки на ЛИ", поступившей из МИС -->

  <publish-subscribe-channel id="misPrescriptionStringChannel" datatype="java.lang.String">
    <!--<interceptors>-->
      <!--<wire-tap channel="loggerChannel"/>-->
    <!--</interceptors>-->
  </publish-subscribe-channel>

  <!-- Шпионская конфигурация (сохранение в шпионский файл)
  <int-xml:xpath-header-enricher input-channel="misPrescriptionStringChannel" output-channel="spyStringChannel">
    <int-xml:header name="file_name" xpath-expression="/prescriptionDTO/prescription/id"/>
  </int-xml:xpath-header-enricher>
  <channel id="spyStringChannel"/>
  <file:outbound-channel-adapter channel="spyStringChannel"
                                 filename-generator-expression="headers.get('file_name')+'.xml'"
                                 directory="${spy.request.from.mis}"/>
  завершение шпионской конфигурации -->

  <chain input-channel="misPrescriptionStringChannel" output-channel="observationStringChannel">
    <header-enricher>
      <header name="output-file-code" method="computeValue">
        <beans:bean class="mis.integration.ariadna.FileCodeGenerator"/>
      </header>
      <!--Запоминаем исходную xml-строку (здесь PrescriptionDTO) -->
      <header name="source_string" expression="payload"/>
    </header-enricher>
    <int-xml:unmarshalling-transformer unmarshaller="misPrescriptionMarshaller"/>
    <transformer ref="prescriptionTransformer" method="transformToRequestRoot"/>
    <int-xml:marshalling-transformer marshaller="ariadnaJaxb2Marshaller" result-type="StringResult"/>
    <transformer expression="payload.toString()"/>
  </chain>

  <publish-subscribe-channel id="observationStringChannel" datatype="java.lang.String">
    <!--<interceptors>-->
      <!--<wire-tap channel="loggerChannel"/>-->
    <!--</interceptors>-->
  </publish-subscribe-channel>

  <!-- Записываем результат преобразования в исходящие файлы (в соответствии с протоколом) -->

  <file:outbound-channel-adapter charset="UTF-8"
      channel="observationStringChannel"
      filename-generator="xmlReportFileGenerator"
      directory="file:${output.request.directory}"/>

  <transformer input-channel="observationStringChannel" output-channel="observationMd5Channel"
               ref="md5Transformer" method="transform"/>

  <channel id="observationMd5Channel" datatype="java.lang.String"/>

  <file:outbound-channel-adapter
      channel="observationMd5Channel"
      filename-generator="md5ReportFileGenerator"
      directory="file:${output.request.directory}"/>

</beans:beans>