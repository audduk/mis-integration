<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/integration"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:int-xml="http://www.springframework.org/schema/integration/xml"
             xmlns:file="http://www.springframework.org/schema/integration/file"
             xsi:schemaLocation="
             http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd
             http://www.springframework.org/schema/integration
             http://www.springframework.org/schema/integration/spring-integration.xsd
             http://www.springframework.org/schema/integration/xml
             http://www.springframework.org/schema/integration/xml/spring-integration-xml.xsd
             http://www.springframework.org/schema/integration/file
             http://www.springframework.org/schema/integration/file/spring-integration-file.xsd">
  <!-- ************ Используемые бины ************ -->
  <beans:bean class="mis.integration.ariadna.config.IntegrationConfig"/>
  <beans:import resource="common-integration.xml"/>

  <!-- Преобразование файла "Протокол ЛИ", поступившего из ЛИС -->

  <channel id="lisReportFileInputChannel"/>

  <file:file-to-string-transformer input-channel="lisReportFileInputChannel" output-channel="lisReportStringChannel"
                                   charset="UTF-8"
                                   delete-files="false"/>

  <!-- ++++++++++++ начало "боевой" конфигурации" ++++++++++++ -->

  <channel id="lisReportStringChannel" datatype="java.lang.String">
    <queue capacity="5"/>
    <interceptors>
      <wire-tap channel="fileStartedChannel"/>
      <!--<wire-tap channel="loggerChannel"/>-->
    </interceptors>
  </channel>

  <chain id="mainReportChain" input-channel="lisReportStringChannel" output-channel="misReportZipChannel">
    <header-enricher>
      <!--Запоминаем исходную xml-строку (здесь observation) -->
      <header name="source_string" expression="payload"/>
    </header-enricher>
    <int-xml:unmarshalling-transformer unmarshaller="ariadnaJaxb2Marshaller"/>
    <splitter expression="payload.getObservations()"/>
    <header-enricher>
      <!--Запоминаем исходный объект observation (будет использоваться при построении pdf) -->
      <header name="observation" expression="payload"/>
    </header-enricher>
    <splitter expression="payload.getReportGroups()"/>
    <header-enricher>
      <!--Запоминаем исходный объект reportGroup (будет использоваться при построении pdf) -->
      <header name="reportGroup" expression="payload"/>
    </header-enricher>
    <transformer expression="@reportTransformer.transformToReport(headers.get('observation'), payload)"/>
    <header-enricher>
      <!--Запоминаем полученный объект report (будет использоваться при построении pdf) -->
      <header name="report" expression="payload"/>
      <!-- Задаем имя "шпионского" zip-файла с протоколом, передаваемым в МИС -->
      <header name="zip_name" expression="headers.get('file_name') + '-' + @serviceCodeFinder.getCode(payload) + '.zip'"/>
    </header-enricher>
    <int-xml:marshalling-transformer marshaller="misReportMarshaller" result-type="StringResult"/>
    <transformer expression="payload.toString()"/>
    <transformer ref="pdfSplitter"/>
    <transformer ref="zipTransformer"/>
  </chain>

  <publish-subscribe-channel id="misReportZipChannel">
    <interceptors>
      <wire-tap channel="fileFinishedChannel"/>
      <!--<wire-tap channel="loggerChannel"/>-->
    </interceptors>
  </publish-subscribe-channel>

  <transformer input-channel="misReportZipChannel" output-channel="misReportOutput"
               ref="base64Encoder"/>

  <channel id="misReportOutput">
    <interceptors>
      <wire-tap channel="loggerChannel"/>
    </interceptors>
  </channel>

  <!-- Вспомогательная конфигурация (логгирование действий с файлами) -->
  <channel id="fileStartedChannel"/>
  <transformer input-channel="fileStartedChannel" output-channel="loggerChannel"
               expression="headers.get('file_name') + ' - started'"/>

  <channel id="fileFinishedChannel"/>
  <transformer input-channel="fileFinishedChannel" output-channel="loggerChannel"
               expression="headers.get('file_name') + ' - finished ' + headers.get('reportGroup').getResultDescription()"/>

  <!-- ++++++++++++ завершение "боевой" конфигурации" ++++++++++++ -->

  <!-- Тестовая конфигурация, избегаем ошибки незакрытого канала -->
  <bridge input-channel="misReportOutput" output-channel="nullChannel"/>

</beans:beans>